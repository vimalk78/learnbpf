// Generated by ChatGPT

#define BPF_ALU64_IMM(OP, DST, IMM) \
    ((struct bpf_insn) { \
        .code  = BPF_ALU64 | BPF_OP(OP) | BPF_K, \
        .dst_reg = DST, \
        .imm = IMM })

#define BPF_JMP_IMM(OP, DST, IMM, OFF) \
    ((struct bpf_insn) { \
        .code  = BPF_JMP | BPF_OP(OP) | BPF_K, \
        .dst_reg = DST, \
        .imm = IMM, \
        .off = OFF })

#define BPF_MEMWORD(DST, SRC, OFF) \
    ((struct bpf_insn) { \
        .code  = BPF_LDX | BPF_SIZE(BPF_W) | BPF_MEM, \
        .dst_reg = DST, \
        .src_reg = SRC, \
        .off = OFF })

#define BPF_MEMDWORD(DST, SRC, OFF) \
    ((struct bpf_insn) { \
        .code  = BPF_LDX | BPF_SIZE(BPF_DW) | BPF_MEM, \
        .dst_reg = DST, \
        .src_reg = SRC, \
        .off = OFF })

struct bpf_insn prog[] = {
    BPF_MEMDWORD(BPF_REG_1, BPF_REG_1, 0), // load the pointer to the path
    BPF_MEMDWORD(BPF_REG_2, BPF_REG_1, 4), // load the length of the path
    BPF_MEMDWORD(BPF_REG_3, BPF_REG_1, 8), // load the prefix
    BPF_MEMDWORD(BPF_REG_4, BPF_REG_1, 12),// load the prefix length

    // Compare each character in the prefix
    BPF_ALU64_IMM(BPF_MOV, BPF_REG_5, 0), // set the counter to 0
    BPF_ALU64_IMM(BPF_MOV, BPF_REG_6, 1), // set the counter to 0
    BPF_ALU64_IMM(BPF_MOV, BPF_REG_7, 0), // set the match flag to 0
    BPF_J


// version 2

#define BPF_ALU64_IMM(OP, DST, IMM) \
    ((struct bpf_insn) { \
        .code  = BPF_ALU64 | BPF_OP(OP) | BPF_K, \
        .dst_reg = DST, \
        .imm = IMM })

#define BPF_JMP_IMM(OP, DST, IMM, OFF) \
    ((struct bpf_insn) { \
        .code  = BPF_JMP | BPF_OP(OP) | BPF_K, \
        .dst_reg = DST, \
        .imm = IMM, \
        .off = OFF })

#define BPF_MEMWORD(DST, SRC, OFF) \
    ((struct bpf_insn) { \
        .code  = BPF_LDX | BPF_SIZE(BPF_W) | BPF_MEM, \
        .dst_reg = DST, \
        .src_reg = SRC, \
        .off = OFF })

#define BPF_MEMDWORD(DST, SRC, OFF) \
    ((struct bpf_insn) { \
        .code  = BPF_LDX | BPF_SIZE(BPF_DW) | BPF_MEM, \
        .dst_reg = DST, \
        .src_reg = SRC, \
        .off = OFF })

struct bpf_insn prog[] = {
    BPF_MEMDWORD(BPF_REG_1, BPF_REG_1, 0), // load the pointer to the path
    BPF_MEMDWORD(BPF_REG_2, BPF_REG_1, 4), // load the length of the path
    BPF_MEMDWORD(BPF_REG_3, BPF_REG_1, 8), // load the prefix
    BPF_MEMDWORD(BPF_REG_4, BPF_REG_1, 12),// load the prefix length

    // Compare each character in the prefix
    BPF_ALU64_IMM(BPF_MOV, BPF_REG_5, 0), // set the counter to 0
    BPF_ALU64_IMM(BPF_MOV, BPF_REG_6, 1), // set the match flag to 0
    BPF_JMP_IMM(BPF_JGE, BPF_REG_5, BPF_REG_4, 8), // check if counter >= prefix length
    BPF_MEMWORD(BPF_REG_7, BPF_REG_1, BPF_REG_5), // load current character from path
    BPF_MEMWORD(BPF_REG_8, BPF_REG_3, BPF_REG_5), // load current character from prefix
    BPF_ALU64_IMM(BPF_SUB, BPF_REG_7, BPF_REG_8), // compare the current character

