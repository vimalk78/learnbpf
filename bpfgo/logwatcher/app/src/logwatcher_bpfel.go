// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64
// +build 386 amd64 amd64p32 arm arm64 mips64le mips64p32le mipsle ppc64le riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadLogwatcher returns the embedded CollectionSpec for logwatcher.
func loadLogwatcher() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_LogwatcherBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load logwatcher: %w", err)
	}

	return spec, err
}

// loadLogwatcherObjects loads logwatcher and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*logwatcherObjects
//	*logwatcherPrograms
//	*logwatcherMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadLogwatcherObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadLogwatcher()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// logwatcherSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type logwatcherSpecs struct {
	logwatcherProgramSpecs
	logwatcherMapSpecs
}

// logwatcherSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type logwatcherProgramSpecs struct {
	SyscallEnterClose *ebpf.ProgramSpec `ebpf:"syscall_enter_close"`
	SyscallEnterOpen  *ebpf.ProgramSpec `ebpf:"syscall_enter_open"`
	SyscallEnterWrite *ebpf.ProgramSpec `ebpf:"syscall_enter_write"`
	SyscallExitOpen   *ebpf.ProgramSpec `ebpf:"syscall_exit_open"`
}

// logwatcherMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type logwatcherMapSpecs struct {
	CtxSyscallOpen *ebpf.MapSpec `ebpf:"ctx_syscall_open"`
	FdToPathForPid *ebpf.MapSpec `ebpf:"fd_to_path_for_pid"`
}

// logwatcherObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadLogwatcherObjects or ebpf.CollectionSpec.LoadAndAssign.
type logwatcherObjects struct {
	logwatcherPrograms
	logwatcherMaps
}

func (o *logwatcherObjects) Close() error {
	return _LogwatcherClose(
		&o.logwatcherPrograms,
		&o.logwatcherMaps,
	)
}

// logwatcherMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadLogwatcherObjects or ebpf.CollectionSpec.LoadAndAssign.
type logwatcherMaps struct {
	CtxSyscallOpen *ebpf.Map `ebpf:"ctx_syscall_open"`
	FdToPathForPid *ebpf.Map `ebpf:"fd_to_path_for_pid"`
}

func (m *logwatcherMaps) Close() error {
	return _LogwatcherClose(
		m.CtxSyscallOpen,
		m.FdToPathForPid,
	)
}

// logwatcherPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadLogwatcherObjects or ebpf.CollectionSpec.LoadAndAssign.
type logwatcherPrograms struct {
	SyscallEnterClose *ebpf.Program `ebpf:"syscall_enter_close"`
	SyscallEnterOpen  *ebpf.Program `ebpf:"syscall_enter_open"`
	SyscallEnterWrite *ebpf.Program `ebpf:"syscall_enter_write"`
	SyscallExitOpen   *ebpf.Program `ebpf:"syscall_exit_open"`
}

func (p *logwatcherPrograms) Close() error {
	return _LogwatcherClose(
		p.SyscallEnterClose,
		p.SyscallEnterOpen,
		p.SyscallEnterWrite,
		p.SyscallExitOpen,
	)
}

func _LogwatcherClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed logwatcher_bpfel.o
var _LogwatcherBytes []byte
